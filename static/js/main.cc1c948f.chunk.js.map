{"version":3,"sources":["assets/images/logo.svg","assets/images/youngmu.png","assets/images/unknown.png","components/ImageCollector.tsx","components/User.tsx","components/Counter.tsx","components/AnimalList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ProfileImageCollector","youngmu","unknown","NameCompiler","name","len","length","i","charAt","substring","User","this","props","birthdeath","isAdmin","mode","givenName","getOnlyGivenName","imgName","undefined","Unknown","className","src","width","alt","React","Component","Counter","state","counter","onIncrement","setState","onDecrement","type","onClick","Counter2","useState","count","setCount","Animal","Animals","map","animal","index","key","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,sPCS9BC,EAAgC,CACzC,QAAWC,IACX,QAAWC,KCFTC,E,8GACsBC,GAEpB,IADA,IAAIC,EAAMD,EAAKE,OACPC,EAAI,EAAGA,EAAEF,EAAKE,IAClB,GAAsB,MAAnBH,EAAKI,OAAOD,GACX,OAAOH,EAAKK,UAAUF,EAAE,GAGhC,MAAO,c,KAIFG,EAAb,iLACc,IAAD,EACyCC,KAAKC,MAA3CR,EADH,EACGA,KAAMS,EADT,EACSA,WADT,IACqBC,QACtBC,EAAO,iBAFN,WAIDA,EAAO,cAGX,IAAIC,EAAYb,EAAac,iBAAiBb,GAC1Cc,EAAUlB,EAAsBgB,GAIpC,YAHeG,IAAZD,IACCA,EAAUlB,EAAsBoB,SAGhC,yBAAKC,UAAU,eACX,uCACA,yBAAKA,UAAU,WACX,yBAAKC,IAAKJ,EAASK,MAAM,QAAQC,IAAI,gBAGzC,6BACI,sCACCpB,GAEL,6BACI,6CACCS,GAEL,6BACI,sCACCE,QA9BrB,GAA0BU,IAAMC,W,QCZnBC,EAAb,2MACEC,MAAe,CACbC,QAAS,GAFb,EAIEC,YAAc,WACZ,EAAKC,UACH,kBAAkB,CAAEF,QAApB,EAAGA,QAAoC,OAN7C,EASEG,YAAc,WACZ,EAAKD,UACH,kBAAkB,CAAEF,QAApB,EAAGA,QAAoC,OAX7C,wEAcY,IACAC,EAA6BnB,KAA7BmB,YAAaE,EAAgBrB,KAAhBqB,YACrB,OACE,yBAAKX,UAAY,WACf,uCACA,4BAAKV,KAAKiB,MAAMC,SAChB,4BAAQI,KAAK,SAASC,QAASJ,GAA/B,KACA,4BAAQG,KAAK,SAASC,QAASF,GAA/B,UArBR,GAA6BP,IAAMC,WA2B5B,SAASS,IAAY,IAAD,EACGC,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,KAGvB,OACI,yBAAKjB,UAAY,WACb,wCACA,0CAAgBgB,EAAhB,WACA,4BAAQH,QAAS,kBAAMI,EAASD,EAAM,KAAtC,a,ICrCNE,E,iLACO,IACEnC,EAAQO,KAAKC,MAAbR,KACP,OACI,4BACI,8BAAOA,Q,GALFqB,IAAMC,WAWdc,EAAb,iLAIQ,OACI,yBAAKnB,UAAU,mBACX,4CAEA,4BANW,CAAC,MAAO,MAAO,SAAU,SAOpBoB,KAAI,SAACC,EAAQC,GAAT,OACZ,kBAAC,EAAD,CAAQC,IAAKD,EAAOvC,KAAMsC,aAVlD,GAA6BjB,IAAMC,WCepBmB,EAzBO,WACpB,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKwB,IAAMzB,UAAU,WAAWG,IAAI,SACzC,4CACA,kBAAC,EAAD,CACEpB,KAAK,eACLS,WAAW,gBACXC,SAAS,IAGX,kBAAC,EAAD,CACEV,KAAK,eACLS,WAAW,kBAGb,kBAAC,EAAD,MACA,kBAACsB,EAAD,MACA,kBAAC,EAAD,SCdYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cc1c948f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8b016e0a.svg\";","module.exports = __webpack_public_path__ + \"static/media/youngmu.9a325d3a.png\";","module.exports = __webpack_public_path__ + \"static/media/unknown.1f1b2c8b.png\";","import youngmu from '../assets/images/youngmu.png'\nimport unknown from '../assets/images/unknown.png'\n\ninterface Profile{\n    Youngmu: string\n    Unknown: string\n    [name:string]: string\n}\n\nexport const ProfileImageCollector:Profile = {\n    \"Youngmu\": youngmu,\n    \"Unknown\": unknown\n}","import React from 'react';\nimport {ProfileImageCollector} from './ImageCollector'\n\ninterface Props {\n    name: string;\n    birthdeath: string;\n    isAdmin?: boolean;\n}\n\nclass NameCompiler{\n    static getOnlyGivenName(name:string): string{\n        let len = name.length;\n        for(let i = 0; i<len; i++){\n            if(name.charAt(i) === \" \"){\n                return name.substring(i+1);\n            }\n        }\n        return \"Unknown\";\n    }\n}\n\nexport class User extends React.Component<Props>{\n    render() {\n        const { name, birthdeath, isAdmin = false } = this.props;\n        let mode = \"User-mode\"\n        if (isAdmin) {\n            mode = \"Admin-mode\"\n        }\n        \n        let givenName = NameCompiler.getOnlyGivenName(name);\n        let imgName = ProfileImageCollector[givenName];\n        if(imgName === undefined){\n            imgName = ProfileImageCollector.Unknown\n        }\n        return (\n            <div className=\"Profile-box\">\n                <h2>Profile</h2>\n                <div className=\"Img-box\">\n                    <img src={imgName} width=\"200px\" alt=\"mooPicture\"></img>\n                </div>\n            \n                <div>\n                    <b>Name:  </b>\n                    {name}\n                </div>\n                <div>\n                    <b>birth-death:  </b>\n                    {birthdeath}\n                </div>\n                <div>\n                    <b>mode:  </b>\n                    {mode}\n                </div>\n            </div>\n        )\n    }\n}","import React, {useState} from 'react';\n\ninterface Props {\n    \n}\ninterface State {\n  counter: number;\n}\n\nexport class Counter extends React.Component<Props, State> {\n  state: State = {\n    counter: 0\n  };\n  onIncrement = (): void => {\n    this.setState(\n      ({ counter }) => ({ counter: counter + 1 })\n    );\n  }\n  onDecrement = (): void => {\n    this.setState(\n      ({ counter }) => ({ counter: counter - 1 })\n    );\n  }\n  render() {\n    const { onIncrement, onDecrement } = this;\n    return (\n      <div className = \"Counter\">\n        <h1>Counter</h1>\n        <h3>{this.state.counter}</h3>\n        <button type=\"button\" onClick={onIncrement}>+</button>\n        <button type=\"button\" onClick={onDecrement}>-</button>\n      </div>\n    );\n  }\n}\n\nexport function Counter2() {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div className = \"Counter\">\n            <h1>Counter2</h1>\n            <p>You clicked {count} times!</p>\n            <button onClick={() => setCount(count+1)}>\n                Click me\n            </button>\n        </div>\n    )\n}","import React from 'react'\n\ninterface P{\n    name:string\n}\n\nclass Animal extends React.Component<P>{\n    render(){\n        const {name} = this.props\n        return (\n            <li>\n                <span>{name}</span>\n            </li>\n        )\n    }\n}\n\nexport class Animals extends React.Component{\n    render(){\n        const animalList = ['dog', 'cat', 'spider', 'snake'];\n\n        return (\n            <div className=\"Animal-list-box\">\n                <h3>Animal List!</h3>\n                \n                <ol>\n                    {animalList.map((animal, index) => (\n                        <Animal key={index} name={animal} />\n                    ))}\n                </ol>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './assets/images/logo.svg';\nimport './assets/styles/App.css';\nimport {User} from './components/User';\nimport {Counter, Counter2} from './components/Counter'\nimport {Animals} from './components/AnimalList'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Welcome, YT!</h1>\n        <User\n          name=\"Yang Youngmu\"\n          birthdeath=\"1999-06-01 ~ \"\n          isAdmin={true}\n        />\n\n        <User\n          name=\"Yang Yoontae\"\n          birthdeath=\"1999-04-07 ~ \"\n        />\n\n        <Counter/>\n        <Counter2/>\n        <Animals/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// 만약 오프라인에서 앱을 동작시킬거고 로드를 빨리하려면,\n// unregister() 를 register로 바꿔. 약간 fails를 가져다 줄 수는 있어.\n// severce workers에 대해 배우려면, https://bit.ly/CRA-PWA 를 참조해\n\nserviceWorker.unregister();\n"],"sourceRoot":""}